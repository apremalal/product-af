<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.template("application/add", function (inputs, outputs, jagg) { %>

<%
    var appFacURL = getProperty(APPFACTORY_SERVER_URL).split("services")[0];
    var webContext = getProperty(WEB_CONTEXT_ROOT);
    var helpTips = outputs.helpTips;
    var uploadableAppExts = outputs.uploadableAppExts;
    var mod = jagg.module("manager");
    var uploadableApplicationMaxSize=outputs.uploadableApplicationMaxSize;
    var type = request.getParameter("type");
    var appTypeDisplayName = request.getParameter("appTypeDisplayName");
    var appType = request.getParameter("apptype");

    var apptypeIconImageClass = request.getParameter("apptypeIconImageClass");
    var iconColor = request.getParameter("apptypeIconColor");
    var iconImage = request.getParameter("apptypeIconImage");


    var buttonCreateUpload = "Create";
    if( type == "existing"){
        buttonCreateUpload = "Upload";
    }
    %>


   <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/old_css/jquery-ui.css'))%>">
   <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jquery-ui-1.10.4.js'))%>"></script>
    <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/userActivity.js'))%>"></script>


    <script type="text/javascript">

        var MAX_APP_KEY_LENGTH = 20;
 var validated = true;
 var uploadStartTime = 0;
 var uploadableApplicationMaxSize = '<%=uploadableApplicationMaxSize%>';
 var helpTips;
 var uploadableAppExts = JSON.parse('<%=stringify(uploadableAppExts)%>');

 function validateDuplicateApplicationKey(key) {
     var isKeyValid = validateApplicationKeyContent();
     if (isKeyValid) {
         jagg.syncPost("../blocks/application/add/ajax/add.jag", {
             action: "isApplicationKeyAvailable",
             applicationKey: key
         }, function(result) {
             if (result.isAvailable == "true") {
                 isKeyValid = true;
             } else {
                 isKeyValid = false;
                 validated = validated && false;
                 $("#appcreation").prop("disabled", false);
                 jagg.message({
                     type: 'error',
                     content: 'Invalid Application Key - Create a key which is not duplicated',
                     id: 'appcreationerrormsg'
                 });
             }
         }, function(jqXHR, textStatus, errorThrown) {

             if (jqXHR.status != 0) {
                 $("#appcreation").prop("disabled", false);
                 jagg.message({
                     content: 'Error while checking the availability of the application key',
                     type: 'error',
                     id: 'appcreationerrormsg'
                 });
             }

             isKeyValid = false;
         });
     }

     return isKeyValid;
 }

 function validateDuplicateApplicationName(appName) {
     var isNameValid = validateApplicationName();
     jagg.syncPost("../blocks/application/add/ajax/add.jag", {
         action: "isAppNameAlreadyAvailable",
         applicationName: appName
     }, function(result) {
         if (result.isAvailable == "true") {
             isNameValid = true;
         } else {
             isNameValid = false;
             validated = validated && false;
             $("#appcreation").prop("disabled", false);
             jagg.message({
                 type: 'error',
                 content: 'Invalid Application Name - Create a name which is not duplicated',
                 id: 'appcreationerrormsg'
             });
         }
     }, function(jqXHR, textStatus, errorThrown) {

         if (jqXHR.status != 0) {
             jagg.message({
                 content: 'Error while checking the availability of the application name',
                 type: 'error',
                 id: 'appcreationerrormsg'
             });
         }

         isNameValid = false;
     });
     return isNameValid;
 }

 function validateDuplicateApplicationKeyInAsync() {
     validated = validateApplicationKeyContent();
     if (validated) {
         jagg.post("../blocks/application/add/ajax/add.jag", {
             action: "isApplicationKeyAvailable",
             applicationKey: $("#applicationKey").attr('value')
         }, function(result) {
             var status = jQuery.parseJSON(result);
             if (status.isAvailable == "true") {
                 validated = true;
             } else {
                 validated = false;
                 $("#appcreation").prop("disabled", false);
                 jagg.message({
                     type: 'error',
                     content: 'Invalid Application Key - Create a key which is not duplicated',
                     id: 'appcreationerrormsg'
                 });
             }
         }, function(jqXHR, textStatus, errorThrown) {
             if (jqXHR.status != 0) {
                 jagg.message({
                     content: 'Error while checking the availability of the application key',
                     type: 'error',
                     id: 'appcreationerrormsg'
                 });
             }
         });
     } else {
         validated = false;
     }
 }

 function generateApplicationKey() {
     var genKey = Math.floor(Math.random() * 1000);
     document.createAppForm.applicationKey.value = (document.createAppForm.applicationName.value).replace(/ /g, "").toLowerCase() + genKey;
 }

 function getFileExtension(filename) {
     var parts = filename.split('.');
     return parts[parts.length - 1];
 }

 function validateIconImage(filename, fileSize) {

     var ext = getFileExtension(filename);
     var maxSize = 5242880;
     var status1 = false;
     var status2 = false;

     // Check extension
     switch (ext.toLowerCase()) {
         case 'jpg':
         case 'jpeg':
         case 'gif':
         case 'bmp':
         case 'png':
             status1 = true;
     }

     // Check size
     if (fileSize != undefined && fileSize > 5242880) {
         status2 = false;
     } else {
         status2 = true;
     }

     // Set status
     if (status1 == true && status2 == true) {
         $('#iconInvalidMsg').hide();
         validated = validated && true;
     } else {
         if (status1 == false) {
             jagg.message({
                 content: "Invalid image selected for Application Icon - Select a valid image",
                 type: 'error',
                 id: 'appcreationerrormsg'
             });
         } else {
             jagg.message({
                 content: "Image file should be less than 5MB",
                 type: 'error',
                 id: 'appcreationerrormsg'
             });
         }
         validated = validated && false;
     }
 }

 function validateApplicationKeyLength() {
     var appKeyLength = ($("#applicationKey").val()).length;
     if (appKeyLength >= MAX_APP_KEY_LENGTH) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Key - Create a key which is less than " + MAX_APP_KEY_LENGTH + " characters",
             type: 'error',
             id: 'appcreationerrormsg'
         });
         validated = validated && false;
     }
 }

 function validateApplicationKeyAlphaNumeric() {
     var isKeyValid = true;
     var keyValue = $("#applicationKey").val();

     var patternForSpace = / /g;
     var isSpace = patternForSpace.test(keyValue);

     var patternForNonAlphaNumericChars = /[^\w\s]/gi;
     var isInvalidChar = patternForNonAlphaNumericChars.test(keyValue);

     var patternForUnderscore = /_/g;
     var isUnderScore = patternForUnderscore.test(keyValue);

     if (isSpace == true || isInvalidChar == true || isUnderScore == true) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Key - Create a key which has only alphanumeric characters",
             id: 'appcreationerrormsg',
             type: 'error',
             id: 'appcreationerrormsg'
         });
         validated = validated && false;
         isKeyValid = false;
     } else {
         $('#applicationKey').val(keyValue);
         isKeyValid = true;
     }
     return isKeyValid;
 }

 function validateApplicationKeyContent() {
     jagg.removeMessage('appcreationerrormsg');
     var isKeyValid = true;
     var appKeyLength = ($("#applicationKey").val()).length;
     if (appKeyLength == 0) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Key - Create a key which is not empty",
             type: 'error',
             id: 'appcreationerrormsg'
         });
         validated = validated && false;
         isKeyValid = false;
     } else if (!isNaN($("#applicationKey").val())) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Key - Create a key which has does not have only numeric characters",
             type: 'error',
             id: 'appcreationerrormsg'
         });
         validated = validated && false;
         isKeyValid = false;
     } else {
         isKeyValid = validateApplicationKeyAlphaNumeric();
     }
     return isKeyValid;
 }

 function validateApplicationName() {
     $("#appcreationerrormsg").remove();
     var appNameLength = ($("#applicationName").val()).length;
     var isNameValid = validateApplicationNameForQuotes();
     if (appNameLength == 0) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Name - Create a Name which is not empty",
             type: 'error',
             id: 'appcreationerrormsg'
         });
         //  validated = validated && false;
         isNameValid = false;
     } else if (appNameLength > 200) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Name - Too Lengthy",
             type: 'error',
             id: 'appcreationerrormsg'
         });
         // validated = validated && false;
         isNameValid = false;
     }
     return isNameValid;
 }

 function validateApplicationNameForQuotes() {
     var appName = $("#applicationName").val();
     var isNameValid = true;
     var patternForNonQuotationMarks = /[^\w ]/g;
     var isInvalidChar = patternForNonQuotationMarks.test(appName);

     if (isInvalidChar == true) {
         $("#appcreation").prop("disabled", false);
         jagg.message({
             content: "Invalid Application Name - Create a name without special characters",
             id: 'appcreationerrormsg',
             type: 'error',
             id: 'appcreationerrormsg'
         });
         validated = validated && false;
         isNameValid = false;
     } else {
         isNameValid = true;
     }
     return isNameValid;
 }



 function validateUploadedFile() {
     if ($("#action").val() == "uploadExistingApplication") {
         if (!$("#uploaded_application").val()) {
             jagg.message({
                 content: "File is not provided to upload.",
                 type: 'error',
                 id: 'appcreationerrormsg'
             });
             return false;
         }

         var appExt = $("#uploaded_application").val().split('.').pop();
         if (appExt == $("#uploaded_application").val()) {
             appExt = undefined;
         }

         if (!(appExt && uploadableAppExts.indexOf(appExt) > -1)) {
             jagg.message({
                 content: "Invalid file. Please check the extension",
                 type: 'error',
                 id: 'appcreationerrormsg'
             });
             return false;
         }
     }
     return true;

 }

 function validateUploadableArtifactSize(fileSize) {
      return (fileSize < uploadableApplicationMaxSize);
 }

 function uploadProgressBar(completedPercentage) {
     $('#progressbar').progressbar({
         value: completedPercentage,
         create: function(event, ui) {
             $(this).find('.ui-widget-header').css({
                 'background-color': '#3498db'
             })
         }
     });
 }

 function uploadStatus(completedPercentage) {
     document.getElementById("progressStatusMsg").innerHTML = "Starting upload.......";

     if (completedPercentage > 0 && completedPercentage < 100) {
         document.getElementById("progressStatusMsg").innerHTML = "Uploading " + completedPercentage + "%";
     } else {
         document.getElementById("progressStatusMsg").innerHTML = "Application Uploaded Successfully, Please wait you will be navigated to home page shortly";
     }
 }

 function estimatedTimeToComplete(startTime, currentTime, totalFileSize, completedPercentage) {
     var uploadedFileSize = totalFileSize * completedPercentage / 100;
     var takenTime = (currentTime - startTime) / 1000;
     var avgUploadSpeed = uploadedFileSize / takenTime;
     var remainingFileSize = (totalFileSize - uploadedFileSize);
     var estimatedCompleteTime = remainingFileSize / avgUploadSpeed;
     var estimatedTimeWithUnit = getTimeWithUnit(estimatedCompleteTime);
     if (estimatedTimeWithUnit) {
         document.getElementById("remainingTime").innerHTML = "Estimated time to complete " + estimatedTimeWithUnit;
     } else {
         document.getElementById("remainingTime").innerHTML = "";
     }

 }

 function getTimeWithUnit(timeToCalculateUnit) {
     switch (true) {
         case (timeToCalculateUnit > 60):
             return Math.floor(timeToCalculateUnit / 60) + " Minutes and " + Math.round(timeToCalculateUnit % 60) + " Seconds";
             break;
         case (timeToCalculateUnit > 360):
             return Math.floor(timeToCalculateUnit / 360) + " Hours and " + Math.round(timeToCalculateUnit % 360) + " Minutes";
             break;
         case (timeToCalculateUnit < 60 && timeToCalculateUnit > 0):
             return Math.round(timeToCalculateUnit) + " Seconds";
             break;
         default:
             return false;
     }
 }

 /**
 * **************************************************************************
 * Start of JQuery file upload callback functions
 * https://github.com/blueimp/jQuery-File-Upload/wiki/Options#callback-options
 * *************************************************************************
*/

function fileuploadsubmit(e, data){
    var appType = $('#appType').val();
    var allowedAppTypeExtention = uploadableAppExts[appType];
    data.url = "../blocks/application/add/ajax/add.jag",
    data.dataType = 'json',
    data.acceptFileTypes =new RegExp("(\\.|\/)("+allowedAppTypeExtention+")$"),
    data.formData = {action:'uploadExistingArchive',
            appType:appType,
            applicationKey:$("#applicationKey").val()}
}

function fileuploadsend(e, data) {
    var appKey = $('#applicationKey').val().trim();
    if (data.files.length < 1 || !appKey.length || appKey == "null" ) {
        $('#progress').hide();
        $("#upload-message").text("Invalid app key").show();
        return false;
    }
}

function fileuploadchange(e, data){
    $('#progress').show();
    $.each(data.files, function (index, file) {
        $('#progress').removeClass('progress');
        $('#progressDiv').removeClass('progress-bar').removeClass("progress-bar-success").removeAttr("style");
        $('#progressDiv').addClass('progress-bar').addClass("progress-bar-success");
        $('#progress').addClass("progress");
        $("#fileUploadDisplay").val(file.name);
    })
}

function fileuploadprogressall(e, data){
    var progress = parseInt(data.loaded / data.total * 100, 10);
    $('#progress .progress-bar').css(
        'width',
        progress + '%'
    );
}

function fileuploadprocessalways(e, data){
    var index = data.index,
        file = data.files[index],
        displayMsg="";
    if (file.error) {
        $('#progress').hide();
        displayMsg = "Invalid file type. Expected file type is ."+ uploadableAppExts[$('#appType').val()];
        $("#upload-message").text(displayMsg).show();
    } else if(!validateUploadableArtifactSize(file.size)){
        $('#progress').hide();
        displayMsg = "Uploaded file size is bigger than the allowed maximum size.";
        $("#upload-message").text(displayMsg).show();
    } else {
        $('#progress').show();
        $("#upload-message").text(displayMsg).hide();
    }
}

function fileuploaddone(e, data){
    if(data.result.isSuccessful){
        $("#upload-message").text("").hide();
        // Here we set uploadedApplicationKey value to current applicationKey value to identify whether the app key
        // has changed, when user clicks the create application button
        $("#uploadedApplicationKey").val($("#applicationKey").val());
    } else {
        $('#progress').hide();
        $("#upload-message").text(data.result.message).show();
    }
}

function fileuploadfail(e, data){
    $('#progress').hide();
    var appKey = $('#applicationKey').val().trim();
    if (data.files.length < 1 || !appKey.length || appKey == "null" ) {
        $("#upload-message").addClass("invalidKey").text("Invalid application name").show();
    } else {
        $("#upload-message").text("Error occurred while validating the application").show();
    }

}
//End of JQuery file upload callback functions

 var ie = (function() {
     var undef, v = 3,
         div = document.createElement('div');

     while (
         div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
         div.getElementsByTagName('i')[0]
     );

     return v > 4 ? v : undef;
 }());
 $(document).ready(function($) {

    $("#upload-message").hide();
    $('#progress').hide();
     $("#appIcon").change(function() {
         $("#icon").val($("#appIcon").val());
     });

     initializeUserActivity("appCreation", null, null);

     $("#progressOverlay").hide();
     $("#progressSpinner").hide();
     $("#progress-bar-container-id").hide();
     $(".upload").hide();
     $(".hide_on_upload").show();
     $("#progressSpinner").css({
         top: document.body.clientHeight / 2 - $("#progressSpinner").height(),
         left: document.documentElement.clientWidth / 2 - $("#progressSpinner").width(),
         position: 'absolute'
     });
     $("#progress-bar-container-id").css({
         top: document.body.clientHeight / 2 - $("#progressbar").height(),
         left: document.documentElement.clientWidth / 2 - $("#progressbar").width(),
         position: 'absolute'
     });
     $("#progressOverlay").css({
         height: document.body.clientHeight,
         width: document.body.clientWidth
     });
     setHelpTips( <%= helpTips %> );




     var submitbutton = $("#SubmitButton");

     $("#createAppForm").ajaxForm({

         beforeSubmit: function() { //before sending form
             validated = true;
             var appName = $("#applicationName").val();
             var appDesc = $("#applicationDescription").val();
             var appkey = $("#applicationKey").val();
             validateApplicationKeyLength();
             if (!validated) {
                 return false;
             }

             validated = validateDuplicateApplicationKey($("#applicationKey").attr('value'));
             if (!validated) {
                 return false;
             }

             validated = validateDuplicateApplicationName($("#applicationName").attr('value'));
             if (!validated) {
                 return false;
             }

             validated = validateApplicationName();
             if (!validated) {
                 return false;
             }

             if (!validated) {
                 $("#appcreation").removeAttr('disabled');
                 $("#appupload").removeAttr('disabled');
                 return false;
             }

             var file2 = $('#appIcon');
             if (file2.val() != "") {
                 if (ie == undefined || ie > 9) {
                     validateIconImage(file.val(), file[0].files[0].size);
                 }
             }
             if (!validated) {
                 $("#appcreation").removeAttr('disabled');
                 $("#appupload").removeAttr('disabled');
                 return false;
             }

         },
         uploadProgress: function(event, position, total, percentComplete) { //on progress

             $("#appupload").attr('disabled', 'disabled');
             if ($("#action").val() == "uploadExistingApplication") {
                 var completedPercentage = percentComplete;
                 uploadStatus(completedPercentage);
                 uploadProgressBar(completedPercentage);
                 estimatedTimeToComplete(uploadStartTime, new Date(), $('#uploaded_application')[0].files[0].size, percentComplete);
                 $("#progressOverlay").show();
                 $("#progress-bar-container-id").show();
             } else {
                 $("#progressOverlay").show();
                 $("#progressSpinner").show();
             }
         },
         complete: function(result) { // on complete

             if ($("#action").val() == "uploadExistingApplication") {
                 jagg.removeMessage('inProgress');
             }
             var resp = result.responseText;
             var response = jQuery.parseJSON(resp);

             if (response != undefined) {
                 var repositoryPath = response.toString();

                 if (response.result == 1.0) {
                 var appKey = $("#applicationKey").attr('value');
                 var appName = $("#applicationName").val();
                 var isUploadable = false
                 if ($("#action").val() == "uploadExistingApplication") {
                   isUploadable = true;
                }
                 var redirectionPageParams = "application.jag?applicationName=" + appName + "&applicationKey=" +
                    appKey + "&isUploadableAppType=" + isUploadable;
                     window.location.replace(redirectionPageParams);
                 } else if (response.result == 0.0) {
                     //$("#appcreation").attr('disabled', false);
                 }
             }
             $('#appcreation').removeAttr('disabled');
             $('#appupload').removeAttr('disabled');
             $("#progressSpinner").hide();
             $("#progressOverlay").hide();

         }
     });

    // Registering callback functions for file upload
    // more info: https://github.com/blueimp/jQuery-File-Upload/wiki/Options#callback-options
    $('#fileupload')
        .bind('fileuploadsubmit', fileuploadsubmit)
        .bind('fileuploadsend', fileuploadsend)
        .bind('fileuploadchange', fileuploadchange)
        .bind('fileuploadprogressall', fileuploadprogressall)
        .bind('fileuploadprocessalways', fileuploadprocessalways)
        .bind('fileuploaddone', fileuploaddone)
        .bind('fileuploadfail', fileuploadfail);

     $('#fileupload').fileupload({
        maxFileSize:uploadableApplicationMaxSize, //file size in bytes.
        acceptFileTypes:new RegExp("(\\.|\/)("+uploadableAppExts[$('#appType').val()]+")$")
    });


     $('#applicationName').keyup(function(event) {
         var msg = $(this).val();
         if (msg.length > $("#applicationName").attr('maxlength')) {
             msg = msg.substring(0, $("#applicationKey").attr('maxlength'));
         }
         msg = msg.replace(/[^a-zA-Z0-9]+/g, '');
         msg = msg.toLowerCase();
         var appKeyLength = ($("#applicationKey").val()).length;
         if (msg.length >= MAX_APP_KEY_LENGTH) {
             $("#applicationKey").val(msg.substring(0, $("#applicationKey").attr('maxlength')));
         } else {
             var url = '<%=appFacURL%>' + '<%=webContext%>' + "/site/pages/application.jag?applicationName=" + msg + "&applicationKey=" + msg;
             $('#appHome').text(url);
             $('#applicationKey').val(msg);
         }
     });

     $('#applicationName').focusout(function(event) {
         var originalAppKey = $("#applicationKey").attr('value');
         var originalAppName = $("#applicationName").attr('value');
         validateDuplicateApplicationName(originalAppName);
         var appkey = originalAppKey;
         $('#applicationKey').val(appkey);
     });

     $('#applicationKey').focusout(function(event) {
         if ($(this).val() != undefined && $(this).val().length) {
             validateDuplicateApplicationKeyInAsync();
         }
     });

     $('#applicationKey').keyup(function(event) {
         var keyValue = $(this).val();

         if (keyValue.length > $("#applicationKey").attr('maxlength')) {
             keyValue = keyValue.substring(0, $("#applicationKey").attr('maxlength'));
         }

         keyValue = keyValue.toLowerCase();
         $('#applicationKey').val(keyValue);

         var url = '<%=appFacURL%>' + '<%=webContext%>' + "/site/pages/application.jag?applicationName=" + $('#applicationName').val() + "&applicationKey=" + $('#applicationKey').val();
         $('#appHome').text(url);
     });

     // Validate Icon
     $("#icon").change(function() {
         var file = $('#icon');
         validateIconImage(file.val(), this.files[0].size);
     });

 });



 function format(type) {
     return "<div class='app-type-icon-list-display' style='background-image: url(<%=jagg.getAbsoluteUrl(jagg.getThemeFile('assets/img/apptype/" + type.id + ".png')) %>);' ></div>" + type.text;
 }

 function generateKey() {
     return key;
 }

 //New Function to submit upload apps and create new apps
 function submitAppForm(type) {
     if (type == "new") {
         //creating app
         $("#action").val("createNewApplication");
         $("#createAppForm").submit();
     } else {
         // uploading app
         $("#action").val("uploadExistingApplication");
     }

 }

 function selectAppCreationType(obj) {
     if ($(obj).val() == "upload_war_file") {
         $(".hide_on_upload").hide();
         $(".upload").show();
     } else {
         $(".upload").hide();
         $(".hide_on_upload").show();
     }
 }

 function bitesToSize(bits) {
     var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
     if (bits == 0) return '0 Bits';
     else if (bits < 8) return bits + ' Bits';
     var bytes = Math.round(bits / 8);

     var unit = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
     return Math.round(bytes / Math.pow(1024, unit), 2) + ' ' + sizes[unit];
 }

 function setHelpTips(helpTips) {
     $("#appKey").html(helpTips.appKey);
     $("#appIcon").html(helpTips.appIcon);
     $(".appType").html(helpTips.appType);
     $("#repoType").html(helpTips.repoType);
     $("#appURL").html(helpTips.appURL);
     $("#appUpload").html(helpTips.appMaxSize + bitesToSize(uploadableApplicationMaxSize) + "<br>" + helpTips.appUpload);
     $("#appCreateMethod").html(helpTips.appCreateMethod);
 }

 function checkUploadedApptype() {
     $("#appcreationerrormsg").remove();
     var filedetail = $('#uploaded_application');
     var fileTypeArr = filedetail.val().split(".");
     var fileType = fileTypeArr[fileTypeArr.length - 1];
     var apptype = $('#uploadableAppType').val();

     if ((apptype === "Uploaded-binary-App-war" || apptype === "Uploaded-App-Jax-RS" || apptype === "Uploaded-App-Jax-WS") && fileType === "war") {
         return true;
     } else if (apptype === "Uploaded-App-Jaggery" && fileType === "zip") {
         return true;
     } else {
         jagg.message({
             type: 'error',
             content: 'Invalid file type, File type does not match with the selected application type',
             id: 'appcreationerrormsg'
         });
         return false;
     }
 }

 function clearUploadIconField() {
     document.getElementById("icon").value = "";
}

    </script>
<!--#######################################################################-->


    <!-- BOF App factory menu -->
    <div class="navbar navbar-secondary">
        <div class="container-fliud">
            <div class="row">
                <div class="col-md-10 breadcrumb-secondary"> <!--changed from 3 to 10 -->
                    <i class="fa fa-cubes visible-xs"></i>
                    <span class="hidden-xs">Application Cloud /</span>
                    <span class="">Create new app</span>
                </div>
            </div>
        </div>
    </div><!-- EOF App factory menu -->

    <!-- BOF App factory menu actionbar -->
    <div class="action-bar">
        <a href="<%=jagg.getAbsoluteUrl("/site/pages/apptypeselection.jag")%>?type=<%=type%>" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-ring fw-stack-2x"></i>
                    <i class="fw fw-left-arrow fw-stack-1x"></i>
                </span> Back to app type selection
        </a>
        <a href="<%=jagg.getAbsoluteUrl("/site/pages/index.jag")%>" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-ring fw-stack-2x"></i>
                    <i class="fa fa-mail-reply-all fa-stack-1x"></i>
                </span> Cancel
        </a>
    </div><!-- EOF App factory menu actionbar-->



    <div class="container-fluid cloud-container">
        <div class="row">
            <div class="col-md-1">
                <div class="cloud-selected-app-type <%=request.getParameter("apptypeIconColor")%>">
                    <i class="fw <%=request.getParameter("apptypeIconImageClass")%> fw-5x"></i>
                </div>
            </div>
            <div class="col-md-6">
                <div class="cloud-selected-app-type-name">
                    <h1><%=request.getParameter("appTypeDisplayName")%></h1>
                </div>
            </div>
        </div>
         <div class="row">
            <form enctype="multipart/form-data" method='post' action='<%=jagg.getAbsoluteUrl("/site/blocks/application/add/ajax/add.jag")%>'  name="createAppForm" id="createAppForm">
                <input type="hidden" name="action" id="action" value="createNewApplication" />
                <div class="col-md-5 forms">
                    <div class="form-group">
                        <label for="application-name">Application Name: </label>
                        <input type="appname" class="form-control" name="applicationName" id="applicationName" placeholder="Enter Application name">
                    </div>
                    <input  type='hidden' maxlength="19" id='applicationKey' name="applicationKey" placeholder="Application Key" class="half required" />
                    <input  type='hidden' maxlength="19" id='appTypeDisplayName' name="appTypeDisplayName" value="<%=appTypeDisplayName%>"/>
                    <input  type='hidden' maxlength="19" id='appType' name="appType" value="<%=appType%>"/>
                    <input  type='hidden' maxlength="19" id='repositoryType' name="repositoryType" value="git"/>
                    <input  type='hidden' maxlength="19" id='repoAccessibility' name="repoAccessibility" value="perDevRepo"/>
                    <div class="form-group">
                        <label for="application-description">Description: </label>
                        <textarea class="form-control" name='applicationDescription' id='applicationDescription' rows="3"></textarea>
                    </div>

                    <!-- If uploadable application -->
                    <% if(type == "existing"){%>
                    <input  type='hidden' maxlength="19" id='uploadedApplicationKey' name="uploadedApplicationKey"/>
                    <div class="form-group">
                        <label for="application-icon">Upload Application: </label>
                        <div class="input-group">
                            <input type="text" id="fileUploadDisplay" class="form-control" readonly>
                        <span class="input-group-btn">
                            <!-- The file input field used as target for the file upload widget -->
                            <span class="btn btn-primary btn-file">
                                    Upload&hellip; <input id="fileupload" type="file" name="fileupload" multiple>
                            </span>
                        </span>
                        <!-- Progress bar-->
                        </div>
                            <div id="progress" class="progress">
                                <div id="progressDiv" class="progress-bar progress-bar-success"></div>
                        </div>
                    </div>
                    <!-- Upload archive error msg div-->
                    <div id="upload-message" name="upload-message" class="alert alert-danger" role="alert"></div>
                    <% } %>

                    <div class="form-group">
                        <label for="application-icon">Icon: </label>
                        <div class="input-group">
                            <input type="text" id="icon" class="form-control" readonly>
                            <span class="input-group-btn">
                                <span class="btn btn-primary btn-file">
                                    Upload&hellip; <input type="file" id="appIcon"/>
                                </span>
                                <span class="btn btn-primary btn-file" onclick="clearUploadIconField()" id="clear">
                                    Clear
                                </span>
                           <!--     <span class="btn btn-primary btn-file">
                                    Clear&hellip;
                                    <button type="reset" id='clear'/>
                                </span>-->
                            </span>
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="cu-btn cu-btn-sm cu-btn-blue" id="add-application" onclick="submitAppForm('<%=type%>')">
                            <span class="fw-stack fw-lg btn-action-ico">
                                <i class="fw fw-ring fw-stack-2x"></i>
                                <i class="fw fw-add fw-stack-1x"></i>
                            </span>
                            <%=buttonCreateUpload%>
                        </button>
                    </div>
                </div>
                <input type="hidden" name="userName"  id="userName" value='<%=jagg.getUser()%>'/>
            </form>
        </div>
    </div><!-- /.container -->

<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/bootstrap-3.2.0/bootstrap.min.js'))%>"></script>
<!-- include custom js functions -->
<script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/custom/custom.js'))%>"></script>
<!--####################################################################### end-->
<% }); %>
