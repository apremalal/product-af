<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/constants.jag"); %>
<% jagg.template("application/get", function(inputs, outputs, jagg) { %>
<%
    var log = new Log();
    var applicationName = request.getParameter("applicationName");
    var applicationKey = request.getParameter("applicationKey");
    var stagesMap = outputs.stagesMap;
    var hasDomainMappingPermission = outputs.hasDomainMappingPermission;
    var fineGrainedDomainMappingAllowedStage = outputs.fineGrainedDomainMappingAllowedStage;
    var mod = jagg.module("manager");
    var permissionMod = jagg.module("permission");
    var tenantDomain = mod.getTenantDomain();
    var hasCXOPermissionOnApps = permissionMod.isUserAccessGranted(applicationKey, PERMISSION_CXO_DASHBOARD);
    var isTenantAdmin = permissionMod.hasTenantLevelUserMgtPermission();
    var appDomain = getProperty(DOMAIN_NAME);
    var isUploadableApp = outputs.isUploadableAppType;
    var helpTips = outputs.helpTips;
    var executionType = outputs.executionType;
    var isAllowDomainMapping = outputs.isAllowDomainMapping;
    var hasAppCreationPermission = outputs.hasAppCreationPermission;
    var appTrunkStage = "Development";
    %>
    
 <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/userActivity.js'))%>"></script>
    
 <script type="text/javascript" charset="utf-8">
    //this is for zeroclipboard pluging
    var _defaults = {
      moviePath:         "<%=jagg.getAbsoluteUrl(jagg.getThemeFile('assets/js/vendor/ZeroClipboard/ZeroClipboard.swf'))%>",        // URL to movie
     trustedDomains:    undefined,                  // Domains that we should trust (single string or array of strings)
     hoverClass:        "zeroclipboard-is-hover",   // The class used to hover over the object
     activeClass:       "zeroclipboard-is-active",  // The class used to set object active
     allowScriptAccess: "sameDomain",               // SWF outbound scripting policy
     useNoCache:        true,                       // Include a nocache query parameter on requests for the SWF
     amdModuleId:       null                       // AMD module ID or path to access the ZeroClipboard object
   };
   ZeroClipboard.setDefaults(_defaults);

   var processIndicatorHTML='<img src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile("images/processing.gif"))%>" id="processIndicator" style="width:22px;height:22px;"/>';
   var issuesSummaryJSON = {};
   var openIssuesSummaryJSON={};//keep the open issues for each version
   var descriptionInfo="";//declared to hold the application description
   var loggedinUser='';
   var appownerName='';
   var allResourceCount = [];
   var appInfo;//
   var domainMappedVersion;
   var defaultSubDomain;
   var currentCustomUrl;
   var customUrlVerificationCode;
   var newCustomUrl;
   var applicationType;
   var deployedPodVersionCount = 0;
   var unmappedProdVersion;
   var validateBtnHoverText = "Please click this button to validate the url.";
   var addNewUrlBtnHoverText = "Please click this button to add new custom url.";
   var removeUrlBtnHoverText = "Please click this button to remove custom url."

   var fgdmAllowedStage  = JSON.parse('<%=stringify(fineGrainedDomainMappingAllowedStage)%>') ;
   var deploymentPermission  = JSON.parse('<%=stringify(stagesMap)%>') ;
   var tenantDomain = '<%=tenantDomain%>';
   var hasCXOPermissionOnApps = '<%=hasCXOPermissionOnApps%>';
   var isTenantAdmin = '<%=isTenantAdmin%>';
   var applicationKey = '<%=applicationKey%>';
   var isUploadableApp = '<%=isUploadableApp%>';
   var hasDomainMappingPermission = '<%=hasDomainMappingPermission%>';
   var urlMap={}; //contains map urls agains appversion. introduced to reduce BE calls

   //[cdata[
    $(document).ready(function(){

    	initializeUserActivity("appHome", '<%=applicationKey%>', '<%=applicationName%>');
        setCurrentStatusOfTrunk();
        loggedinUser='<%=userName%>';

        setHelpTips(<%= helpTips %>);
        loadAppIcon('<%=applicationKey%>');
        loadApplicationInfo();

        createVersionStatus();        

        $('#deleteButton').click(function(){
            var status =$('#deleteButton').attr('disabled');
            if(status!==null && status!='disabled'){
               jagg.popMessage({type:'confirm',title:'Delete Application',content:'Are you sure you want to delete application <%=applicationName%>?',okCallback:function(){deleteApplication()}});
            }
        });

        var deleteForm=$('#deleteForm');


        $(deleteForm).ajaxForm({
            complete: function(result) { // on complete
                var resp =result.responseText;

                var jsonResp = JSON.parse(resp);
                if(jsonResp.result == 0){
                    jagg.message({
                        content: jsonResp.message,
                        type: 'error',
                        id:'notification'
                    });
                    return;
                }

                var response = jQuery.parseJSON(resp);
                if(response != undefined) {
                    var repositoryPath = response.toString();
                    if(response.result==1.0){
                      window.location.replace("index.jag");
                    }
                }
            }
        });


        //createCurrentStatus(true);

        if(loggedinUser!=appownerName){
            $('.element-editor-hover').click(function(){
                if($(this).attr("id") && "div-custom-url-hover" == $(this).attr("id")) { // if click on the custom url hover(edit)
                    $("#btn-validate-domain").hide();
                    if(currentCustomUrl){               // if custom url is set, set value in the edit span
                        $('#custom-url-edit').val(currentCustomUrl);
                    } else {
                        $('#custom-url-edit').val("");
                    }
                    // initially disable save button
                    $("#custom-url-save-btn").attr('disabled','disabled');
                }// end of custom url specific action

                $(this).parent().hide().next().show();
            });
        }

        $('.element-editor-cancel').click(function(){
            $(this).closest('.element-editor-edit').hide().prev().show();
        })
        $('#description_save_btn').click(function(){
            $(this).closest('.element-editor-edit').hide().prev().show();
            jagg.removeMessage('notification');
            var newDescription = $('#description_edit').val().trim();
            if(!validateInputForAlphanumericAndSpaces(newDescription)){
                jagg.message({content:'Invalid input for description field!. Only alphanumeric and spaces are allowed.',type:'error',id:'notification' });
                return;
            }
            if(newDescription.length > 1000){
                jagg.message({content:'Use maximum 1000 characters for description field!',type:'error',id:'notification' });
                return;
            }
            jagg.post("../blocks/application/update/ajax/update.jag", {
                action:"updateDescription",
                applicationKey:'<%=applicationKey%>',
                newDescription:newDescription
                },function (result) {
                    $('.description').html(newDescription);
                    if(newDescription.trim() == "" || newDescription == null){
                        $('#description_view').html("Click here to add description");
                        $('#description_hover').html("Click here to add description");
                    }
                },function (jqXHR, textStatus, errorThrown) {
                    jagg.message({content:'Error occurred while updating description!',type:'error',id:'notification' });
            });
        });

        $('#custom-url-save-btn').click(function(){
            $(this).closest('.element-editor-edit').hide().prev().show();
            triggerSaveCustomUrlEvent();
        });

        $('#sub_domain_cancel_btn').click(function(){
        	setUrlMappingElements();
        	var customUrlValue = "";
        	if(currentCustomUrl) {          // if current custom url is defined set edit span to that value, else empty
        	    customUrlValue = currentCustomUrl;
        	}
        	$('#custom-url-edit').val(customUrlValue);
        });

        $('#custom-url-edit').keyup(function(e){
        	var tempCustUrl = $('#custom-url-edit').val().trim();
        	var currentProdUrl = defaultSubDomain+".<%=appDomain%>";
        	if((currentCustomUrl) && (tempCustUrl) && ( (currentCustomUrl == tempCustUrl) || (tempCustUrl == currentProdUrl) ) ) {
        	    // if new custom url is equal to existing current custom url or production url we disable the save button
        	    $("#custom-url-save-btn").attr('disabled','disabled');
        	} else if(!tempCustUrl && !currentCustomUrl){
        	    // if there is no already exciting custom url and new url value is empty we disable the save button.
        	    $("#custom-url-save-btn").attr('disabled','disabled');
        	}else {
        	    $("#custom-url-save-btn").removeAttr('disabled');

        	    // To save the sub domain when the enter key is pressed
        	    code= (e.keyCode ? e.keyCode : e.which);
        	    if (code == 13 && $('#custom-url-edit').val()) {
                    $(this).closest('.element-editor-edit').hide().prev().show();
                    triggerSaveCustomUrlEvent()
                }
        	}
        });

        // validate button tooltip
        $('#btn-validate-domain').qtip({
            content: validateBtnHoverText,
            position : {
                my: 'top right'
            }
        });

        // add new custom url button tooltip
        $('#add-new-custom-url-btn').qtip({
            content: addNewUrlBtnHoverText,
            position : {
                my: 'top right'
            }
        });

        // remove custom url btn tooltip
        $('#remove-custom-url-btn').qtip({
            content: removeUrlBtnHoverText,
            position : {
                my: 'top right'
            }
        });
   });

function validateInputForAlphanumericAndSpaces(inputValue){
	return !/[^a-zA-Z0-9\-\.,'"":;_+=(){}\[\] /]/.test(inputValue);
}
/**
 * Set customer url as a spin icon
 * @param busy
 */
function setCustomUrlBusy(busy){
    if(!busy){
        $(".custom-url-spin").hide();
        $("#custom-url-view").show();
        $("#custom-url-hover").show();
    } else {
        $(".custom-url-spin").show();
        $("#custom-url-view").hide();
        $("#custom-url-hover").hide();
    }
}

/**
* Click add new custom url button
*/
function addNewUrlClick() {
    if(hasDomainMappingPermission ==='true') {
        $("#div-custom-url-details").show();
        $("#div-custom-url-details").find("#div-custom-url-wrapper").hide();
        $("#div-custom-url-details").find(".element-editor-edit").show();
        $("#add-new-custom-url-btn").hide();
    }
}

function deleteApplication(){
   jagg.message({content:'<%=applicationName%> is being deleted, Please wait for a moment',type:'warning',id:'notification',spinner:'true'});
   $('#deleteButton').attr('disabled','disabled');
   $('#deleteForm').submit();
}
function loadAppIcon(appKey) {
    jagg.post("../blocks/application/get/ajax/list.jag", {
        action: "isAppIconAvailable",
        applicationKey: appKey
    },

    function (result) {
      if(result == 101){
          // Application icon is not available, set the default
          $(".app-icon").attr('src','<%=jagg.getAbsoluteUrl(jagg.getThemeFile('assets/img/app_icon.png'))%>');
          console.info("101");
      }
      else
      {
        <%
          var appFacURL = getProperty(APPFACTORY_SERVER_URL).split("services")[0];
          var iconUrl = appFacURL + getProperty(WEB_CONTEXT_ROOT) + "/site/blocks/application/get/ajax/list.jag?action=getAppIcon&applicationKey="+applicationKey;
        %>
        $(".app-icon").attr('src','<%=iconUrl%>');
      }},

      function (jqXHR, textStatus, errorThrown) {
      });

}




function submitChangeAppIcon(newIconObj){
    var validated = validateIconImage(newIconObj.value,newIconObj.files[0].size);
    if(validated){
        $('#changeAppIcon').submit();
    }
}

function getFileExtension(filename) {
    var parts = filename.split('.');
    return parts[parts.length - 1];
    }

function validateIconImage(filename,fileSize) {
    var ext = getFileExtension(filename);
    var extStatus = false;
    var fileSizeStatus = true;
    // Check extension
    switch (ext.toLowerCase()) {
        case 'jpg':
        case 'jpeg':
        case 'gif':
        case 'bmp':
        case 'png':
         extStatus = true;
         break;
        default:
        jagg.message({
                   content: "Invalid image selected for Application Icon - Select a valid image",
                   type: 'error',
                   id:'notification'
               });
         break;
        }

        if(fileSize > <%=APP_ICON_MAX_SIZE%> && extStatus == true){
            fileSizeStatus = false;
            jagg.message({
                   content: "Image file should be less than 5MB",
                   type: 'error',
                   id:'notification'
               });
        }
        if(extStatus == true && fileSizeStatus == true){
             return true;
        }
    return false;
    }

 function toErrorHtml(message){
    var html="<span style=\"color:#D16666\">"+message+"</span>";
    return html;
 }

 function toInfoHtml(message){
    var html="<span style=\"color:#363636\">"+message+"</span>";
     return html;
 }




   function copyNewDependenciesDeployAndLaunchArtifact(applicationKey, version, stage, deployAction, state, type){
       launchApp(applicationKey, version,stage,state,type);
       jagg.post("../blocks/lifecycle/add/ajax/add.jag", {
               action: "copyNewDependenciesAndDeployArtifact",
               applicationKey: applicationKey,
               deployAction:deployAction,
               stage:stage,
               tagName:"",
               version:version
           }, function (result) {
               launchApp(applicationKey, version,stage,state,type);
               jagg.message({
                   content: "The Deployment is successfully submitted. - Refresh the page in few seconds.",
                   type: 'success',
                   id:'notification'
               });
               hideNotification();
           },

           function (jqXHR, textStatus, errorThrown) {
               jagg.message({
                   content: "Error occurred while deploying the artifact.",
                   type: 'error',
                   id:'notification'
               });

           });
   };

   function isAppDeployed(version, stage, type, promoteStatus){
	   jagg.post("../blocks/application/get/ajax/list.jag", {
           action: "getMetaDataForAppVersion",
           applicationKey: '<%=applicationKey%>',
           version: version,
           stage: stage,
           state: "started",
           type: type
       }, function (result) {
           var launchHide;
           if (stage === "Retired") {
               launchHide = "hidden";
           }

           var executionType = '<%=executionType%>';

	   if (executionType){
                executionType = "Open";
           }


    	   var buttons = "";
    	   var resJSON = jQuery.parseJSON(result);
    	   var URL = resJSON.url;

    	   //Domain mapping
           if(domainMappedVersion != null && version == domainMappedVersion && defaultSubDomain){
               URL = "http://" + defaultSubDomain+".<%=appDomain%>";
               if(currentCustomUrl && customUrlVerificationCode){ // if custom url specified and verified
                    URL = "http://" + currentCustomUrl;
               }
           }

    	   if(resJSON.url){
    		   if(promoteStatus==="pending" && deploymentPermission[stage]){
    			   buttons += '<a  name="acceptdeploy_action" href="#" onclick="acceptAndDeploy(\'<%=applicationKey%>\',\'' + version + '\',\'' + stage + '\',\'deploy\',\'started\',\'' + type + '\');" class="btn main small push_right_10 escape-event" style="margin-left:0px;float:left;">Accept & Deploy</a>&nbsp;';
    		   }else{
	    		   buttons += '<a name="open_action" href="'+ URL +'" target="_blank" class="push_right_10 escape-event" style="margin-left:0px;float:left;">' + executionType + '</a>&nbsp;';
	    		   if(stage == fgdmAllowedStage){
                        deployedPodVersionCount++;
                        if(domainMappedVersion == null) {
                            unmappedProdVersion = version;
                        }
                   }
	    		   //buttons += '<a class="copy-link" id ="launch'+version.split(".").join("_")+'" title="Copy URL" data-clipboard-text=""><span class="icon-copy"></span></a>';
    		   }
    	   }else{
    		   if(deploymentPermission[stage]){
	    		   if(promoteStatus==="pending"){
	    			   buttons += '<a  name="acceptdeploy_action" href="#" onclick="acceptAndDeploy(\'<%=applicationKey%>\',\'' + version + '\',\'' + stage + '\',\'deploy\',\'started\',\'' + type + '\');" class="btn main small push_right_10 escape-event" style="margin-left:0px;float:left;">Accept & Deploy</a>&nbsp;';
	    		   }else{
	    			   buttons += '<a name="deploy_action" href="#" onclick="deployApp(\'<%=applicationKey%>\',\'' + version + '\',\'' + stage + '\',\'deploy\',\'started\',\'' + type + '\');" class="btn main small push_right_10 escape-event" style="margin-left:0px;float:left;">Deploy</a>&nbsp;';
	    		   }
    		   }
    	   }

    	   $('#td-4'+version.replace(/\./g,"_")).html("");
    	   $('#td-4'+version.replace(/\./g,"_")).html(buttons);
    	   setClipBoard(version);
       }, function (jqXHR, textStatus, errorThrown) {
           jagg.message({
               content: "Error occurred while checking "+ '<%=applicationKey%>' +" deployed in " + stage,
               type: 'error',
               id:'notification'
           });
       });
   }

//sets the clip board for the copy-url icons
function setClipBoard(version){

       var element_ID='#launch' + version.split(".").join("_");
       var clip = new ZeroClipboard($(element_ID));
       console.log("set El id");

       clip.on('load', function (client) {
           console.log( client);
       });

       clip.on('complete', function (client, args) {
           // alert("Copied text to clipboard: " + args.text );
       });
       clip.on('mousedown', function (client) {

       });
}
   function deployApp(applicationKey, version, stage, deployAction, state, type){
       jagg.post("../blocks/lifecycle/add/ajax/add.jag", {
               action: "copyNewDependenciesAndDeployArtifact",
               applicationKey: applicationKey,
               deployAction:deployAction,
               stage:stage,
               tagName:"",
               version:version
           }, function (result) {
               jagg.message({
                   content: "The Deployment is underway. Please wait and refresh page after few minutes.",
                   type: 'success',
                   id:'notification'
               });
               if((stage == fgdmAllowedStage) && hasDomainMappingPermission === 'true' &&   //has permissions
                            defaultSubDomain && !domainMappedVersion &&                     //production url exists
                            domainMappedVersion == null && deployedPodVersionCount == 0 ){  // there is no version in production which is deployed and mapped
                    remapDomainToVersion(version);
               }
               setTimeout("window.location.reload()",240000);
           },

           function (jqXHR, textStatus, errorThrown) {
               jagg.message({
                   content: "Error occurred while deploying the artifact.",
                   type: 'error',
                   id:'notification'
               });

           });
   };

   function deployAndUpdatePromoteStatus(applicationKey, version, stage, deployAction){
       jagg.post("../blocks/lifecycle/add/ajax/add.jag", {
               action: "deployAndUpdatePromoteStatus",
               applicationKey: applicationKey,
               deployAction:deployAction,
               stage:stage,
               tagName:"",
               version:version
           }, function (result) {
               jagg.message({
                   content: "The Deployment is underway. Please wait and refresh page after few minutes.",
                   type: 'success',
                   id:'notification'
               });
               if((stage == fgdmAllowedStage) && hasDomainMappingPermission === 'true' &&   //has permissions
                            defaultSubDomain && !domainMappedVersion &&                     //production url exists
                            domainMappedVersion == null && deployedPodVersionCount == 0 ){  // there is no version in production which is deployed and mapped
                    remapDomainToVersion(version);
               }
               setTimeout("window.location.reload()",240000);
           },

           function (jqXHR, textStatus, errorThrown) {
               jagg.message({
                   content: "Error occurred while deploying the artifact.",
                   type: 'error',
                   id:'notification'
               });

           });
   };

   function acceptAndDeploy(applicationKey, version, stage, deployAction, state, type){
	   deployAndUpdatePromoteStatus(applicationKey, version, stage, deployAction);
   };


   function launchApp(applicationKey, version,stage,state,type,getUrlOnly){
      	  var URL="";
      	  URL=urlMap[version];

       	  if(URL===undefined){
           jagg.post("../blocks/application/get/ajax/list.jag", {
               action: "getMetaDataForAppVersion",
               applicationKey: applicationKey,
               version: version,
               stage: stage,
               state: state,
               type: type
           }, function (result) {
               var resJSON;
               var msg = "";
               resJSON = jQuery.parseJSON(result);

               var URL = resJSON.url;

               if((!URL)&&(!getUrlOnly)){
                   jagg.message({
                       content: "Application is not deployed yet!",
                       type: 'error',
                       id:'notification'
                   });
                return;
               }
               //Domain mapping
               if(domainMappedVersion != null && version == domainMappedVersion && defaultSubDomain){
                    URL = "http://" + defaultSubDomain + ".<%=appDomain%>";
                    if(currentCustomUrl && customUrlVerificationCode) { // if custom url specified and verified
                        URL = "http://" + currentCustomUrl;
                    }
               }
               if(!getUrlOnly){
                   window.open(URL, '_blank');
               }else{
                   urlMap[version]=URL;
                   $('#launch'+version.split(".").join("_")).attr('data-clipboard-text',URL);
               }
           },
           function (jqXHR, textStatus, errorThrown) {
               jagg.message({
                   content: "Error occured while launching the artifact.!",
                   type: 'error',
                   id:'notification'
               });

           });
       	 }else{
	       	  if(!getUrlOnly){
	              window.open(URL, '_blank');

	          }else{
	              $('#launch'+version.split(".").join("_")).attr('data-clipboard-text',URL);
	          }

          }

   }

   function issuesSummary(appKey){

   jagg.syncPost("../blocks/issuetracker/list/ajax/list.jag", {
       action:"getIssuesSummary",
       applicationKey:appKey
   },function (result) {
       issuesSummaryJSON = result ;
   },function (jqXHR, textStatus, errorThrown) {
    $("#trackerStatus").text("Error occured while retrieving Issue Tracker information!");
    $(".issuetracker").hide();
   });
   }

    function getOpenIssuesSummary(appKey,appVersion){

   jagg.syncPost("../blocks/issuetracker/list/ajax/list.jag", {
       action:"getOpenIssues",
       applicationKey:appKey,
       applicationVersion:appVersion
   },function (result) {
       openIssuesSummaryJSON[appVersion] = result ;
   },function (jqXHR, textStatus, errorThrown) {
    $("#trackerStatus").text("Error occured while retrieving Issue Tracker information!");
    $(".issuetracker").hide();
   });
   }

   function getIssueSummaryForVersion(version){
   if(issuesSummaryJSON[version]===undefined){
       return {'VULNERABILITY':'0','NEW_FEATURE':'0','BUG':'0'};
   }
   return issuesSummaryJSON[version];
   }

   function getTotalOpenIssueCountForVersion(version){
    var issueSummery =openIssuesSummaryJSON[version];
   var total = 0;

   for (var key in issueSummery) {
           total = ++total;
   }
   return total;
   }

   function getTotalIssueCountForVersion(version){
   var issueSummery = getIssueSummaryForVersion(version);
   var total = 0;

   for (var key in issueSummery) {
       if (issueSummery.hasOwnProperty(key) && key != 'appKey' && key != 'version') {
           total = total + Number(issueSummery[key]);
       }
   }
   return total;
   }

   function formatCount(count){
   if(count===undefined){
       return 0;
   }
   return count;
   }

   function loadApplicationInfo(){
       jagg.post("../blocks/application/get/ajax/list.jag", {
            action:"getAppInfo",
            applicationKey:'<%=applicationKey%>'
        },function (result) {
            var parsedArray = jQuery.parseJSON(result);

            $('#apptype').html(parsedArray.typeDisplayName);
            $('#appName').html(parsedArray.name);
            $('#repotype').html(parsedArray.repositoryTypeDisplayName);
            var repoAccessabilityResult =  parsedArray.repoAccessability;
            var repoAccessabilityStrToDisplay = "";
            if(repoAccessabilityResult ==  "perDevRepo") {
                repoAccessabilityStrToDisplay = "Per Developer Repo";
            } else {
               repoAccessabilityStrToDisplay = "Share Parent Repo";
            }
            $('#repoAccessability').html(repoAccessabilityStrToDisplay);
            appInfo=parsedArray;
            appownerName=parsedArray.owner;
            $('#appowner').html("<span title='"+appownerName+"'>"+appownerName+"</span>");


            if(parsedArray.description!=null && parsedArray.description!=""){
                descriptionInfo=parsedArray.description;
                $('.description').html(descriptionInfo);
            }
            else{
                $('#description_view').html("Click here to add description");
                $('#description_hover').html("Click here to add description");
            }

            if(parsedArray.description!="null"){
                $('#description_edit').val(parsedArray.description);
            }
            
            console.info(appInfo.type);
            var type = "<%= jagg.getAbsoluteUrl(jagg.getThemeFile('assets/img/apptype/" + appInfo.type + ".png'))%>";
	    $('#type').attr("src", type);
       },function (jqXHR, textStatus, errorThrown) {
    	   // If user navigates from the page in middle of the ajax call jqXHR.status would be 0.
     	  	if ( jqXHR.status != 0){
     		  jagg.message({content:'Could not load Application information',type:'error',id:'notification' });
     	  	}
       });
   }

   function VersionComparator(a,b) {
	   return b.version.localeCompare(a.version);
   }

   var repoCloneURL = "" ;
   var repoBrowseURL = "" ;
   var noOfTry = 0;

/*
   function createCurrentStatus(isLoad) {
        $("#repositories_and_builds_list_content_new tbody").show();
        $("#repositories_and_builds_list_content_new tbody").empty().append('<span class="icon-spinner icon-spin icon-large spin-large" style="margin:5px;font-size:30px;width:40px;height:40px;line-height:40px;"></span>');

	    jagg.post("../blocks/application/get/ajax/list.jag", {
	        action: "getAppVersionsInStages",
	        userName: $("#userName").attr('value'),
	        applicationKey: '<%=applicationKey%>'
	    }, function (result) {

	        var parsedArray = jQuery.parseJSON(result);
	        var versions = Array();
	        for (var i = 0; i < parsedArray.length; i++) {
	            var application = parsedArray[i];
	            versions = versions.concat(application.versions);
	            applicationType = application.type;
	            defaultSubDomain = application.mappedSubDomain;
	            currentCustomUrl = application.customUrl;
	            customUrlVerificationCode = application.customUrlVerificationCode;

	        }

	        setUrlMappingElements();
            setCustomUrlBusy(false);

	        versions.sort(VersionComparator);
	        issuesSummary(applicationKey);

	        //var warAppVersions = [];
	        for (var j = 0; j < versions.length; j++) {
	            var versionInfo = versions[j];
	            var versionStage = versionInfo.stage;
	            var currentVersion = versionInfo.version;
	            var promoteStatus = versionInfo.promoteStatus;
	            var deployedBuildId = versionInfo.deployedBuildId;

	            getOpenIssuesSummary(applicationKey,currentVersion);

	            //Domain Mapping Logic
	            //T0D0 hardcorded app type
	            if ('<%=isAllowDomainMapping%>' === 'true') {
	               // warAppVersions.push(currentVersion);
	                var previousDomain = versionInfo.productionMappedDomain;
	                if (previousDomain != null && previousDomain.trim().length) {
	                    domainMappedVersion = currentVersion;
	                }
	            }

	            var lasbuildinfo = versionInfo.lastBuildResult;
	            var buildSplitted = lasbuildinfo.split(' ');
	            var builResultStatus = buildSplitted[2];

	            var buildStatus = '';
	            var success=new RegExp("\\bsuccess");
	            if(success.test(builResultStatus)){
	                buildStatus='<span>Build ' + buildSplitted[1] + ' ' +
	                    '<strong class="status success ">'+builResultStatus+'</strong></span>';
	            }else if(lasbuildinfo.length>0){
	                buildStatus='<span>Build ' + buildSplitted[1] + ' ' +
	                    '<strong class="status failed ">'+builResultStatus+'</strong></span>';
	            }

	            repoCloneURL = versionInfo.repoURL;
	            $("#repocloneurl").val(repoCloneURL);
	            $("#copymain").attr("data-clipboard-text", repoCloneURL);
	            repoBrowseURL = repoCloneURL;
	            if (application.repositoryType == "git") {
	                repoBrowseURL = repoCloneURL.replace("/git/", "/summary/?r=");
	            }
	            $("#repobrowseurl").attr("href", repoBrowseURL);


	            var v = currentVersion.replace(/\./g, '_');
	            var issueSummaryObj = getIssueSummaryForVersion(currentVersion);
	            var totalIssueCount = getTotalOpenIssueCountForVersion(currentVersion);


	            //   var url= launchApp(applicationKey,currentVersion,versionStage,'started',applicationType,true);
	            //   debugger;


	            if((isTenantAdmin === 'true') | (hasCXOPermissionOnApps === 'false')){

	              var trs = $(
	                '<tr>' +
	                '<td class="td-2"><a class="js-table-collapse icon-chevron-right"> <span class="collapsable-title">' + currentVersion + '</span> </a></td>' +
	                '<td class="td-2">' + versionStage + '</td>' +
	                //removing ETA
	                //'<td class="td-3" align="center" id="eta_' + applicationKey + '_' + currentVersion.replace(/\./g, '_') + '"></td>' +
	                '<td class="td-2">' + buildStatus + '</td>' +
	                '<td class="td-2 vertical-links"><a style="margin-bottom: 0px" href="<%=jagg.getAbsoluteUrl("/site/pages/issuetracker.jag")%>?applicationName=<%=applicationName%>&applicationKey=<%=applicationKey%>" class="escape-event">' + totalIssueCount + ' Open Issues' + '</a></td>' +
	                '<td class="td-4" id="td-4'+ currentVersion.replace(/\./g,"_") +'"></td>' +
	                '</tr>' +
	                '<tr style="display:none;">' +
	                '<td class="td-2">' +
	                '</td>' +
	                '<td class="td-2"> </td>' +
	                '<td class="td-2"> </td>' +
	                '<td class="td-2 vertical-links">' +
	                '<div class="escape-event">' + formatCount(issueSummaryObj.BUG) + ' Bugs</div>' +
	                '<div class="escape-event">' + formatCount(issueSummaryObj.NEW_FEATURE) + ' Features</div>' +
	                '<div class="escape-event">' + formatCount(issueSummaryObj.VULNERABILITY) + ' Vulnerabilities</div>' +
	                '</td>' +
	                '<td class="td-4"> </td>' +
	                '</tr>'
	            );
	            } else {
	               var trs = $(
	                '<tr>' +
	                '<td class="td-2"><a class="js-table-collapse icon-chevron-right"> <span class="collapsable-title">' + currentVersion + '</span> </a></td>' +
	                '<td class="td-2">' + versionStage + '</td>' +
	                //removing ETA
	                //'<td class="td-3" align="center" id="eta_' + applicationKey + '_' + currentVersion.replace(/\./g, '_') + '"></td>' +
	                '<td class="td-2">' + buildStatus + '</td>' +
	                '<td class="td-2 vertical-links"><a style="margin-bottom: 0px">' + totalIssueCount + ' Open Issues' + '</a></td>' +
	                '<td class="td-4" id="td-4'+ currentVersion.replace(/\./g,"_") +'"></td>' +
	                '</tr>' +
	                '<tr style="display:none;">' +
	                '<td class="td-2">' +
	                '</td>' +
	                '<td class="td-2"> </td>' +
	                '<td class="td-2"> </td>' +
	                '<td class="td-2 vertical-links">' +
	                '<div class="escape-event">' + formatCount(issueSummaryObj.BUG) + ' Bugs</div>' +
	                '<div class="escape-event">' + formatCount(issueSummaryObj.NEW_FEATURE) + ' Features</div>' +
	                '<div class="escape-event">' + formatCount(issueSummaryObj.VULNERABILITY) + ' Vulnerabilities</div>' +
	                '</td>' +
	                '<td class="td-4"> </td>' +
	                '</tr>'
	            );
	            }

	            $('#repositories_and_builds_list_content_new').append(trs);
	            isAppDeployed(currentVersion, versionStage, applicationType, promoteStatus);

	            //updateCalculatedETAValue(applicationKey, versionStage, currentVersion);
	            if(isLoad){
	                launchApp(applicationKey, currentVersion, versionStage, 'started', applicationType, true);
	            }

	        }

	        var clip = new ZeroClipboard($('#copymain'));

	        clip.on('load', function (client) {
	            //alert( "movie is loaded" );
	        });

	        clip.on('complete', function (client, args) {
	            //alert("Copied text to clipboard: " + args.text );
		    $('#copymain').qtip({
			content:{
				attr: 'data-tooltip'
			},
			show:{
				event:'click',
				ready:true
			},
			hide:{
				distance:20
			}
		    });
	        });
	        clip.on('mousedown', function (client) {

	        });

	        $('.js-table-collapse').click(function () {
	            $(this).toggleClass("icon-chevron-down").closest("tr").toggleClass("expanded").next().toggle('fast');
	        });

            // TODO: support for other app types
            if ('<%=isAllowDomainMapping%>' === 'true' && defaultSubDomain) {
                    $('#urlMapper').show();
            } else if(!defaultSubDomain && noOfTry < '<%=MAX_NO_OF_TRY_FOR_ADD_DEFAULT_DOMAIN%>'){
                    $('#urlMapper').hide();
                    noOfTry++;
                    addDefaultProdUrlIfNotExist();
            } else {
                 // hide domain mapping div, if production url is not defined
                $('#urlMapper').hide();
            }

            $('table#repositories_and_builds_list_content_new span.icon-spinner').remove();
	    }, function (jqXHR, textStatus, errorThrown) {
	        setCustomUrlBusy(false);
            $('table#repositories_and_builds_list_content_new span.icon-spinner').remove();

	    });
	}

*/


  /**

  This function is use to load the version details of the new UI  


  */
  function createVersionStatus(){

    jagg.post("../blocks/application/get/ajax/list.jag", {
          action: "getAppVersionsInStages",
          userName: $("#userName").attr('value'),
          applicationKey: '<%=applicationKey%>'
      }, function (result) {
        var parsedArray = jQuery.parseJSON(result);
        
        var versions = Array();

        for (var i = 0; i < parsedArray.length; i++) {
          
          var application = parsedArray[i];
          versions = versions.concat(application.versions);
          applicationType = application.type;
          defaultSubDomain = application.mappedSubDomain;
          currentCustomUrl = application.customUrl;
          customUrlVerificationCode = application.customUrlVerificationCode;

        }

      });

  }
	/**
	*  Set url mapping UI elements based on the current status
	*/
	function setUrlMappingElements(){
	    // Set default prod url
	    if(defaultSubDomain && defaultSubDomain != "null" && defaultSubDomain != ""){
          //$('#default-sub-domain-span').html(defaultSubDomain);
	        $('#prod-url').html(defaultSubDomain);
	    }

	    // set custom url html elements
	    $("remove-custom-url-btn").hide();
	    if(currentCustomUrl && currentCustomUrl != "null" && currentCustomUrl != ""){   //if custom url defined

	        $("#add-new-custom-url-btn").hide();
            $('.custom-url').html(currentCustomUrl);
            $('#custom-url-edit').val(currentCustomUrl);
            if(customUrlVerificationCode) {                 // if custom url verified
                $("#btn-validate-domain").hide();           // hide validate button
                $("remove-custom-url-btn").show();          // show remove button
            } else {
                $("#btn-validate-domain").show();           // else show validate button and hide remove button
                $("remove-custom-url-btn").hide();
            }
        }else{

            $("#btn-validate-domain").hide();               // if custom url is not verified, hide validate btn
             $("#div-custom-url-details").hide();
            if(hasDomainMappingPermission ==='true') {
                $("#add-new-custom-url-btn").show();
            } else {
                $("#add-new-custom-url-btn").hide();
            }
            $('.custom-url').html("<span class='sub_domain_no_txt'>&lt;sub_domain&gt;</span>");
        }
    }

   /**
   *  Validate custom url pattern.
   */
   function validateUrlPattern(){
	   newCustomUrl = $('#custom-url-edit').val().trim();
	   var pattern=/[\w-]+(\.[\w-]+)+/;
	   if(!newCustomUrl.trim().length || newCustomUrl == 'null' || !pattern.test(newCustomUrl)){    // if new custom url has not valid text
		   jagg.message({content:'Please specify a valid url',type:'error',id:'notification' });
	       return false;
	   } else if(currentCustomUrl && newCustomUrl && (currentCustomUrl == newCustomUrl)){           // if new url is equal to current url
            jagg.message({content:'Please enter a different url than existing url',type:'error',id:'notification' });
            return false;
	   }
	   return true;
   }

   /**
   * Click validate custom url btn
   */
   function validateCustomUrl(){
        newCustomUrl = $('#custom-url-edit').val().trim();
        updateDomainMapping();
   }

   /**
   * Hide notifications
   * @param timeout to be wait until auto remove the notifications
   */
   function hideNotification(timeout) {
        if(timeout) {
            // create new timer with given time interval
            setTimeout(function () {
                jagg.removeMessage('notification')
            }, timeout);
        } else {
            jagg.removeMessage('notification');
        }
    }

   /**
   *  Update domain mapping
   */
   function updateDomainMapping() {
	    if (hasDomainMappingPermission === 'true'){
            if(domainMappedVersion){                                            // if already mapped to a version
                mapNewCustomUrlToVersion(domainMappedVersion , newCustomUrl);
            } else if(unmappedProdVersion && deployedPodVersionCount == 1) {    // there is an one unmapped version in production state
                mapNewCustomUrlToVersion(unmappedProdVersion , newCustomUrl);
            } else if(currentCustomUrl){                                       // if there is an assigned custom url
                updateExistingUnmappedCustomUrl();
            } else {
                addNewCustomUrl();
            }
	    }
   }

   function addDefaultProdUrlIfNotExist(){
         jagg.post("../blocks/urlmapper/add/ajax/add.jag", {
	           action:"addDefaultProdUrl",
	           applicationKey:applicationKey
	       },function (result) {
	    	   hideNotification();
	    	   if(jQuery.parseJSON(result) == true){
                  jagg.message({
                  content: "Default production url added successfully",
                  type: 'success',
                  id:'notification'
                });
	    	   //createCurrentStatus(false);
	    	   }
	       },function (jqXHR, textStatus, errorThrown) {
	           jagg.message({content:jqXHR.responseText,type:'error',id:'notification' });
	           //createCurrentStatus(false);
	       });
   }


    /**
     * Remove previous domain and remap new domain to the given version
     */
   function mapNewCustomUrlToVersion(version ,newDomain){
        jagg.post("../blocks/urlmapper/update/ajax/update.jag", {
	           action:"mapNewCustomUrlToVersion",
	           version:version,
	           newCustomUrl:newDomain,
	           applicationKey:applicationKey
	       },function (result) {
	    	   hideNotification();
	    	   jagg.message({
                    content: "Production url " +newDomain+" is mapped to version - " + version,
                    type: 'success',
                    id:'notification'
                });
	    	   //createCurrentStatus(false);
	       },function (jqXHR, textStatus, errorThrown) {
	           jagg.message({content:jqXHR.responseText,type:'error',id:'notification' });
	          // createCurrentStatus(false);
	       });
   }

    /**
     * Update existing unmapped sub domain
     */
   function updateExistingUnmappedCustomUrl(){
       jagg.post("../blocks/urlmapper/update/ajax/update.jag", {
	           action:"updateExistingUnmappedCustomUrl",
	           newCustomUrl:newCustomUrl,
	           applicationKey:applicationKey
	       },function (result) {
	           hideNotification();
	           //createCurrentStatus(false);
	       },function (jqXHR, textStatus, errorThrown) {
               //TODO: If error occurred update domain mapping to defaultSubDomain
               jagg.message({content:jqXHR.responseText,type:'error',id:'notification' });
              // createCurrentStatus(false);
	       });
   }

   /**
     * Add new sub domain
     */
   function addNewCustomUrl(){
        jagg.post("../blocks/urlmapper/add/ajax/add.jag", {
	           action:"addNewCustomUrl",
	           newCustomUrl:newCustomUrl,
	           applicationKey:applicationKey
	       },function (result) {
	    	   hideNotification();
	    	   //createCurrentStatus(false);
	       },function (jqXHR, textStatus, errorThrown) {
	           jagg.message({content:jqXHR.responseText,type:'error',id:'notification' });
	           //createCurrentStatus(false);
	       });
   }

    /**
     * Remap existing domain to a new version
     */
    function remapDomainToVersion(version){
         jagg.post("../blocks/urlmapper/update/ajax/update.jag", {
                    action:"remapDomainToVersion",
                    oldVersion: "",
                    newVersion:version,
                    applicationKey:applicationKey
               },function (result) {
                    hideNotification();
                    jagg.message({
                        content: "Custom url is updated to " +newCustomUrl,
                        type: 'success',
                        id:'notification'
                    });
                    jagg.message({
                        content: "Production url is mapped to version - " + version,
                        type: 'success',
                        id:'notification'
                    });
                 //   createCurrentStatus(false);
               },function (jqXHR, textStatus, errorThrown) {
                   //createCurrentStatus(false);
                   jagg.message({content:jqXHR.responseText,type:'error',id:'notification' });
               });
    }

    /**
    *  Remove exisiting custom url
    */
    function removeCustomUrl() {
        if(hasDomainMappingPermission ==='true') {
            jagg.post("../blocks/urlmapper/update/ajax/update.jag", {
                   action:"removeCustomUrl",
                   applicationKey:applicationKey
               },function (result) {
                   hideNotification();
                   //createCurrentStatus(false);
               },function (jqXHR, textStatus, errorThrown) {
                   jagg.message({content:jqXHR.responseText,type:'error',id:'notification' });
                   //createCurrentStatus(false);
               });
        }
    }

    /**
    * Trigger custom url save event.
    */
    function triggerSaveCustomUrlEvent() {
        newCustomUrl = $('#custom-url-edit').val().trim();
        if(currentCustomUrl && !newCustomUrl){       // if there is already existing customurl and new custom url is empty
            setCustomUrlBusy(true);
            removeCustomUrl();
        } else {
            // validate url pattern
            if(!validateUrlPattern()){
                $('#custom-url-edit').val("");
                setUrlMappingElements();
                return;
            }
            setCustomUrlBusy(true);
            updateDomainMapping();
        }
    }


   function updateCalculatedETAValue(appKey,stage, version){
           var endDate ="" ;
           jagg.post("../blocks/eta/calculate/ajax/get.jag", {
                action:"calculate",
                applicationKey:'<%= applicationKey %>',
                version:version,
                stage:stage

            },function (result) {
                var parsedObject = jQuery.parseJSON(result);
                var v= version.replace(/\./g, '_') ;
                $("#eta_"+appKey+"_"+v).text("");
        	if(!result.error && parsedObject.eta.endDate.length != 0){
                      $("#eta_"+appKey+"_"+v).text("Estimated Date : "+ parsedObject.eta.endDate);
              }
            },function (jqXHR, textStatus, errorThrown) {

            });
   }

   function setHelpTips(helpTips){
		$("#appDescription").html(helpTips.appDescription);
		var prodUrlHelp = helpTips.productionUrlViewOnly;
        $("#productionUrlHelpText").html(prodUrlHelp);
        $("#launch").html(helpTips.launch);
        $(".appHomeIcon").attr("title",helpTips.appIcon);
   }
   //]]
</script>

<script type="text/javascript">
$(document).ready(function () {

//for notification
 var scrollHeight = $('.notification-pane').height() - 150;
        $('.notifications').css('height', scrollHeight)
        $(".nano").nanoScroller();


    console.info("Documet Ready");
    //createVersionStatus();
    //loadApplicationInfo();
    console.info("End of load");
    loggedinUser = $('#userName').val();
    if (loggedinUser == appownerName) {
        $('#description').qtip({
            content: {
                text: $(this).attr('data-value')
            },
            show: {
                when: 'click',
                solo: true // Only show one tooltip at a time
            },
            hide: 'unfocus',
            style: {
                classes: 'popup_status_box tooltip',
                widget: false,
                def: false
            }
        });
        $('#urlMapper').qtip({
            content: {
                text: $(this).attr('data-value')
            },
            show: {
                when: 'click',
                solo: true // Only show one tooltip at a time
            },
            hide: 'unfocus',
            style: {
                classes: 'popup_status_box tooltip',
                widget: false,
                def: false
            }
        });

    }


});
</script>
<!-- #########################NEWUI################################ -->


    <!-- right pane wrapper -->
    <div class="right-pane">
    
    <!-- BOF App factory menu actionbar -->
    <div class="action-bar">
        <a href="<%=jagg.getAbsoluteUrl("/site/pages/apptypeselection.jag")%>" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-ring fw-stack-2x"></i>
                    <i class="fw fw-left-arrow fw-stack-1x"></i>
                </span> Go Back
        </a>
    </div><!-- EOF App factory menu actionbar-->


    <div class="container-fluid app-content-section">
        <div class="row">


          <div class="col-md-12 app-preview">
              <div class="app-thumb">
                <img class="app-icon" src="" /> 
                <span><i class="fa fa-pencil" onclick="document.getElementById('aaaaa').click();"></i></span>
                <input id="aaaaa" type="file" style="display:none" onchange="alert('HIIIII');"/> 
              </div>

              <div class="app-desc">
                <h2 id="appName" name="appName">My Java App</h2>
                <p class="description">Lorem Ipsum is simply dummy text of the printing and typesetting industry.</p>
                <div class="app-preview-action-bar">
                    <div class="sec prod-url">
                      <a id="prod-url" href="#">http://testapp.wso2app.com</a>
                      <a href="#"><i class="fw fw-settings"></i></a>
                    </div>
                    <div class="sec"><button class="cu-btn cu-btn-md cu-btn-gr-dark">Launch App</button></div>
                    <div class="sec">
                       
                        <!-- edit code button -->
                        <div class="btn-group ctrl-edit-button">
                          <button type="button" class="btn cu-btn cu-btn-md cu-btn-blue">Edit Code</button>
                          <button type="button" class="btn cu-btn cu-btn-md cu-btn-blue cu-dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                          </button>
                          <ul class="dropdown-menu cu-btn-blue btn-edit" role="menu">
                            <li><a href="#">Use Cloud Editor</a></li>
                            <li><a href="#">Use Local IDE</a></li>
                          </ul>
                        </div>

                    </div>
                </div>
              </div>
          </div>
          <div class="col-md-9">
              <div class="block-general">
                  <div class="row">
                      <div class="col-md-9">

                          <select class="version-number">
                              <option>trunk</option>
                              <option>1.0.0</option>
                          </select>
                          <div class="version-url"><span>URL: http://javatest.djcompany.wso2app.com</span> </div>

                      </div>
                      <div class="col-md-3">
                          <div class="btn-create-version">
                              <span class="fw-stack fw-lg btn-action-ico">
                                <i class="fw fw-ring fw-stack-2x"></i>
                                <i class="fw fw-add fw-stack-1x"></i>
                              </span> Create Version
                          </div>
                      </div>
                  </div>
                  <div class="row">
                      <div class="col-md-4" >
                          <div class="block-life-cycle">
                              <h3>Lifecycle Mgt</h3>
                              <div class="block-icon pull-left">
                                  <i class="fw fw-lifecycle fw-5x"></i>
                              </div>
                              <div class="block-description pull-right" id="lifecycle-mgt-main">
                                  Application <strong><%=applicationName%></strong> is in
                                  <br>
                                  <strong><%=appTrunkStage%></strong> Stage
                              </div>
                              <div class="clearfix"></div>
                                 <div class="block-action-button">
                                  <a href="<%=jagg.getAbsoluteUrl("/site/pages/governance.jag")%>?applicationName=<%=applicationName%>&applicationKey=<%=applicationKey%>">
                                    <span class="fw-stack fw-lg btn-action-ico">
                                    <i class="fw fw-ring fw-stack-2x"></i>
                                    <i class="fw fw-lifecycle fw-stack-1x"></i>
                                    </span> Manage Lifecycle
                                </a>
                                </div>  
                          </div>
                      </div>
                      <div class="col-md-4">
                          <div class="block-repos">
                              <h3>Repos and Builds</h3>
                              <div class="block-icon pull-left">
                                  <i class="fw fw-clock fw-5x"></i>
                              </div>
                              <div class="block-description-multiline pull-left" id="success-and-fail-ids">
                                  3 Successfull<br>
                                  1 Failed
                              </div>
                          </div>
                      </div>
                      <div class="col-md-4">
                          <div class="block-issues">
                              <h3>Open Issues</h3>
                              <div class="block-icon pull-left">
                                  <span class="fa-stack fa-lg fa-3x">
                                      <i class="fa fa-circle-thin fa-stack-2x"></i>
                                      <i class="fa fa-exclamation fa-stack-1x fa-inverse"></i>
                                  </span>
                              </div>
                              <div class="block-description-multiline pull-left">
                                  <i class="fa  fa-bug"></i> 3 Bugs<br>
                                  2 Features<br>
                                  1 Vulnerability
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          <div class="col-md-3">
              <div class="block-team pull-left">
                  <h3>Team</h3>
                  <div class="block-icon pull-left">
                    <i class="fa fa-users fa-5x"></i>
                  </div>
                  <div class="block-number pull-right">
                    12
                  </div>
                  <div class="clearfix"></div>
                  <div class="block-action-button">
                        <span class="fw-stack fw-lg btn-action-ico">
                            <i class="fw fw-ring fw-stack-2x"></i>
                            <i class="fw fw-add fw-stack-1x"></i>
                          </span> Invite Member
                  </div>
              </div>
              <div class="block-database pull-left">
                  <h3>Databases</h3>
                  <div class="block-icon pull-left">
                    <i class="fa fa-database fa-5x"></i>
                  </div>
                  <div class="block-number pull-right">
                    04
                  </div>
                  <div class="clearfix"></div>
                  <div class="block-action-button">
                        <span class="fw-stack fw-lg btn-action-ico">
                            <i class="fw fw-ring fw-stack-2x"></i>
                            <i class="fw fw-add fw-stack-1x"></i>
                          </span> Add Database
                  </div>
              </div>
          </div>


        </div>
    </div><!-- /.container -->


    </div> <!-- /.right pane -->
<!-- notification wall-->
<% 
//jagg.includeBlock("page/messages", null);
//jagg.includeBlock("page/eventing", {"applicationKey":null,"pageName":PAGES.APP_HOME});
jagg.includeBlock("page/notification-wall", {"wall_name":applicationKey+" - App Wall","applicationKey":applicationKey,"pageName":"App Home"}); 
%>

<!-- /.notification wall -->

    <div class="clearfix"></div>
    <div id="push"></div>
</div> <!-- /.inner wrapper -->

<!-- jQuery (necessary for Bootstraps JavaScript plugins) -->
<script src="js/jquery-1.11.1/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="js/bootstrap-3.2.0/bootstrap.min.js"></script>
<!-- include custom js functions -->
<script src="js/custom/custom.js"></script>

<script>
    $('.side-pane-trigger').click(function(){
        var rightPane = $('.right-pane');
        var leftPane = $('.left-pane');
        if (rightPane.hasClass('visible')){
            rightPane.animate({"left":"0em"}, "slow").removeClass('visible');
            leftPane.animate({"left":"-18em"}, "slow");
            $(this).find('i').removeClass('fa-arrow-left').addClass('fa-reorder');
        } else {
            rightPane.animate({"left":"18em"}, "slow").addClass('visible');
            leftPane.animate({"left":"0em"}, "slow");
            $(this).find('i').removeClass('fa-reorder').addClass('fa-arrow-left');
        }
    });
    $('.notification-pane-trigger').click(function(){
        var notificationPane = $('.notification-pane');
        if(notificationPane.hasClass('visible')){
            notificationPane.animate({"right":"0em"}, "slow").removeClass('visible');
        }else{
            notificationPane.animate({"right":"-24em"}, "slow").addClass('visible');
        }
    });

</script>


<script>
function setCurrentStatusOfTrunk(){
   jagg.post("../blocks/application/get/ajax/list.jag", {
              action:"getAppVersionsInStages",
              applicationKey: '<%=applicationKey%>',
              userName: $("#userName").attr('value')
          },function (result) {
             var parsedArray = jQuery.parseJSON(result);
             var versions = Array();
             for (var i = 0; i < parsedArray.length; i++) {
                var application = parsedArray[i];
                versions = versions.concat(application.versions);
            }console.log("versions : " + JSON.stringify(versions));
            var versionInfo = versions[0];
            var versionStage = versionInfo.stage;
            var lasbuildinfo = versionInfo.lastBuildResult;
            var buildSplitted = lasbuildinfo.split(' ');
            $("#lifecycle-mgt-main").html("Application <strong><%=applicationName%></strong> is in <br> <strong>"+versionStage+"</strong> Stage");
            $("#success-and-fail-ids").html(buildSplitted[1] +" " + buildSplitted[2]);


        },function (jqXHR, textStatus, errorThrown) {
              if ( jqXHR.status != 0){
                jagg.message({content:'Could not load Application information',type:'error',id:'notification' });
              }
         });
  
  }
</script>







<!--###################################################################################################-->
<% }); %>
